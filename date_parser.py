from datetime import datetime
#Holds string content of file

class Date_Parser:

    def __init__(self, target_file: str):
        self.target_file = target_file
        with open(self.target_file, 'r') as file:
            self.content = file.read()

    #Build list of month acronyms:
    month_acronyms: list = ["Jan","Feb","Mar","Apr","May",
    "Jun","Jul","Aug","Sep","Oct","Nov","Dec"]

    #open file and read individual strings for acronym inclusion
    #with open('missoula.txt', 'r') as file:
        #content = file.read()

    def get_months(self, target_list: list = month_acronyms) -> list:
        """Gets the pertinent months out of the text

        Parameters
        ----------
        target_list : list
            The acronyms to compare the text to

        Returns
        -------
        list
            a list of all strings that contained the month acronyms as a substring
        """
        dates: list = []
        for word in self.content.split():
            for item in target_list:
                if item in word:
                    dates.append(word)
        return(dates)

    #narrow our list down to only formatted dates
    def get_day_month(self, month_list: list) -> list:
        """Parses the provided list to include only day_month strings

        Parameters
        ----------
        month_list : list
            A list of all months returned by the get_months function

        Returns
        -------
        list
            a list of all properly formatted day_month strings
        """
        day_month: list = []
        day_list: list = str(list(range(1, 32)))
        for month in month_list:
            for day in day_list:
                if day in month:
                    day_month.append(month)
        return(day_month)

    #append and increment when applicable the year to the date
    def set_years(self, day_month: list, year_index: int) -> list:
        """ Concatenate and increment the year to the day_month string

        Parameters
        ----------
        day_month : list
            The list generated by the get_day_month function
        year_index : int
            The starting year for the dates

        Returns
        -------
        list
            a list of all properly formatted year_day_month strings
        """
        year = year_index
        year_day_month: list = []
        incremented_year: bool = False
        for month in day_month:
            if "Jan" in month and not incremented_year:
                incremented_year = True
                year += 1
                year_day_month.append(str(year) + "-" + month)
            else:
                year_day_month.append(str(year) + "-" + month)
        return(year_day_month)

    def set_date_object(self, ydm: list, in_fmt: str ="%Y-%d-%b" , out_fmt: str = "%Y-%m-%d") -> list:
        """Converts a list of year, date month, string into a target format 

        Parameters
        ----------
        ydm : list
            The list generated by the set_years method
        in_fmt : str
            The format of the input string using strptime format
        out_fmt: str
            The desired format for output using strftime format

        Returns
        -------
        list
            a list of all properly formatted date string
        """
        date_objects: list = []
        date_output: list = []
        for date in ydm:
            date_objects.append(datetime.strptime(date, in_fmt))
        for date_object in date_objects:
            date_output.append(datetime.strftime(date_object, out_fmt))
        return(date_output)

if __name__ == '__main__':
    parser = Date_Parser("missoula.txt")
    months: list = parser.get_months()
    day_months: list = parser.get_day_month(months)
    year_day_months: list = parser.set_years(day_months, 2015)
    final_list = parser.set_date_object(year_day_months)
    print(final_list)
